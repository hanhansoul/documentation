# 第四章 schema与数据类型优化

## 选择优化的数据类型

1. 更小的通常更好：尽量使用可以正确岑姝数据的最小数据类型。
2. 简单就好：简单数据类型的操作通常需要更少的CPU周期。
3. 尽量避免NULL：通常情况下最好指定列为NOT NULL的。如果查询中包含NULL的列，将使得索引、索引统计和值比较都更加复杂。如果计划在列上建立索引，则尽量避免将该列设计为可为NULL的列。

## 整数类型

1. TINYINT
2. SMALLINT
3. MEDIUMINT
4. INT
5. BIGINT

整数类型有可选的UNSIGNED属性，表示不允许负值。

## 实数类型

MySQL既支持精确类型，也支持不精确类型。

FLOAT和DOUBLE类型支持使用标准的浮点运算进行近似计算。

DECIMAL类型用于存储精确的小数与精确计算。

## 字符串类型

CHAR类型

CHAR类型时定长的，MySQL总是根据定义的字符串长度分配足够的空间。

CHAR适用于测出很短的字符串，或者所有值都接近同一个长度的字符串，如存储密码的MD5值等。

对于经常变化的数据，CHAR也比VARCHAR更好，因为定长的CHAR不容易产生碎片。

VARCHAR类型

VARCHAR类型用于存储可变长字符串，是最常见的字符串数据类型。它比定长类型更节省空间，因为它只使用必要的空间。

VARCHAR使用1或2个额外字节记录字符串的长度：如果列的最大长度小于或等于255字节，则只使用1个字节表示，否则使用2个字节表示。

适用场景：
1. 字符串列的最大长度比平均长度大很多；
2. 列的更新很少，碎片不会成为问题；
3. 使用了如UTF8等复杂的字符集，每个字符都是用不同的字节数进行存储。

InnoDB会将过长的VARCHAR存储为BLOB。

BINARY和VARBINARY与CHAR和VARCHAR	类似，用于存储二进制字符串。

## BLOB和TEXT类型

BLOB和TEXT用于存储很大的数据而设计的字符串数据类型，BLOB采用二进制存储，TEXT采用字符方式存储。

- TINYBLOB
- SMALLBLOB
- BLOB
- MEDIUMBLOB
- LONGBLOB

TEXT

- TINYTEXT
- SMALLTEXT
- TEXT
- MEDIUMTEXT
- LONGTEXT

MySQL不能将BLOB和TEXT列全部长度的字符串进行索引。

## 枚举类型

使用枚举类型列可以代替常用的字符串类型。枚举列可以把一些不重复的字符串存储为一个预定义的集合。

枚举列实际存储的是对应的整数值，而不是字符串值。

枚举类型的字符串列表是固定的，添加或删除字符串必须使用ALTER TABLE命令。

在查询中，VARCHAR与ENUM类型互相关联比较与转换将使得查询速度下降。

将VARCHAR转换为ENUM类型能够使表占用的空间缩小，同时也使得在对应列上的索引大小缩小。

## 日期和时间类型

DATETIME：保存大范围的值，从1001年到9999年，精度为秒。使用8字节存储空间。
TIMESTAMP：与UNIX时间戳相同，使用4字节存储空间。

## 位数据

## 选择标识符

1. 整数类型：速度快，可以使用AUTO_INCREMENT。
2. ENUM和SET类型：ENUM和SET列适合存储固定信息，如有序状态、产品类型、人的性别等。
3. 字符串类型：避免使用字符串类型作为标识列，因为其很消耗空间。

# 范式与反范式

在范式化的数据库中，每个数据都会出现并且只出现一次，而在反范式化的数据库中，信息是冗余的，可能存储在多个地方。

最常见的反范式化数据的方法是复制或者缓存，在不同的表中存储相同的特定列。可以使用触发器更新缓存之，这使得这样的方案更加简单。

## 物化视图

物化视图实际上是预先计算并存储在磁盘上的表，可以通过各种各样的策略刷新和更新。MySQL并不原生支持物化视图。

1. 变更数据抓取功能，可以读取服务器的二进制日志。
2. 一系列可以帮助创建和管理视图的定义的存储过程。
3. 一些可以应用变更到数据库中的物化视图的工具。

通过提取对源表的更改，可以增量地重新计算物化视图的内容，这意味着不需要通过查询原始数据来更新视图。

## 计数器表

