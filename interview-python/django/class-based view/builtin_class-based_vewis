https://docs.djangoproject.com/en/2.1/ref/class-based-views/

- Base views
	- View
	- TemplateView 渲染一个给定的模板，提供一个包含了URL提供测参数的上下文参数
	- RedirectView
- Generic display views
	- DetailView
	- ListView
- Generic editing views
	- FormView
	- CreateView
	- UpdateView
	- DeleteView
- Generic data views
	- ArchiveIndexView
	- YearArchiveView
	- MonthArchiveView
	- WeekArchiveView
	- DayArchiveView
	- TodayArchiveView
	- DateDetailView
- Class-based views mixins
	- Simple mixins
		- ContextMixin
		- TemplateResponseMixin
	- Single object mixins
		- SingleObjectMixin
		- SingleObjectTemplateResponseMixin
	- Multiple object mixins
		- MultipleObjectMixin
		- MultipleObjectTemplateResponseMixin
	- Editing mixins
		- FormMixin
		- ModelFormMixin
		- ProcessFormView
		- DeletionMixin
	- Date-based mixins
		- YearMixin
		- MonthMixin
		- DayMixin
		- WeekMixin
		- DateMixin
		- BaseDateListView
- Class-based generic views - flattened index
	- Simple generic views
		- View
		- TemplateView
		- RedirectView
	- Detail Views
		- DetailView
	- List Views
		- ListView
	- Editing views
		- FormView
		- CreateView
		- UpdateView
		- DeleteView
	- Date-based views
		- ArchiveIndexView
		- YearArchiveVIew
		- MonthArchiveView
		- WeekArchiveView
		- DayArchiveView
		- TodayArchiveView
		- DateDetailView


## TemplateView

- dispatch()
- http_method_not_allowed()
- get_context_data() 返回一个表示模板上下文的字典类型，也可以
通过`as_views()`方法的`extra_context`参数给定，继承自ContextMixin。

views.py

	from django.views.generic.base import TemplateView

	from articles.models import Article

	class HomePageView(TemplateView):

	    template_name = "home.html"

	    def get_context_data(self, **kwargs):
	        context = super().get_context_data(**kwargs)
	        context['latest_articles'] = Article.objects.all()[:5]
	        return context

urls.py

	from django.urls import path

	from myapp.views import HomePageView

	urlpatterns = [
	    path('', HomePageView.as_view(), name='home'),
	]

## RedirectView

重定向至给定的URL。

views.py

	from django.shortcuts import get_object_or_404
	from django.views.generic.base import RedirectView

	from articles.models import Article

	class ArticleCounterRedirectView(RedirectView):

	    permanent = False
	    query_string = True
	    pattern_name = 'article-detail'

	    def get_redirect_url(self, *args, **kwargs):
	        article = get_object_or_404(Article, pk=kwargs['pk'])
	        article.update_counter()
	        return super().get_redirect_url(*args, **kwargs)

urls.py

	from django.urls import path
	from django.views.generic.base import RedirectView

	from article.views import ArticleCounterRedirectView, ArticleDetail

	urlpatterns = [
	    path('counter/<int:pk>/', ArticleCounterRedirectView.as_view(), name='article-counter'),
	    path('details/<int:pk>/', ArticleDetail.as_view(), name='article-detail'),
	    path('go-to-django/', RedirectView.as_view(url='https://djangoproject.com'), name='go-to-django'),
	]